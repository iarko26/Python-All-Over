# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OgSWr3nZh78GE-UzkIYTbDVxb-qImQxa
"""

import numpy as np

x=np.array([1,2,3])
y=np.array([4,5,6])
print(x+y)

# Commented out IPython magic to ensure Python compatibility.
# %timeit [j**4 for j in range(1,8)]

# Commented out IPython magic to ensure Python compatibility.
# %timeit np.dot(1,8)**4

# create a array
a=np.array([1,2,3])
print(a)

# know the type of array
print(type(a))
# multiple dimension array
list_1 = [1, 2, 3, 4]
list_2 = [5, 6, 7, 8]
list_3 = [9, 10, 11, 12]
sample_array = np.array([list_1,
                         list_2,
                         list_3])
print(sample_array)

print(sample_array.shape)

print(list_1[0], list_2[0], list_3[0])
list_1[0]=10
print(list_1[0], list_2[0], list_3[0])

# create all zeros array

zero_array=np.zeros((2,3))
print(zero_array)

# create a full constant array

full_constant_array=np.full((2,2),5)
print(full_constant_array)

# create a 3X3 identity matrix

identity_matrix=np.eye(3)
print(identity_matrix)


# array indexing

ia=np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])
# ib is the view not a copy of ia so when i modify in ib it will impact ia
ib=ia[:2, 1:3]
# print(ia)
print(ib)
print(ia[0,2])
ib[0,0]=100
# print(ib)
print(ia[0,1])


row_r1=ia[1,:]
print(row_r1)
# it will start for the index 1 row but not include row2
row_r2=ia[1:2,:]

print(row_r2)

n1= np.array([[9,2], [3, 4], [5, 6]])
print(n1[[0, 1, 2], [0, 1, 0]])
# 0 row with 0 colum =9 ,1 row with 1 column 4,0 row with 0=5

n2=np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
print(n2)
n3=np.array([0, 2, 0, 1])
print(n3)
print(n2[np.arange(4), n3])


# np.arange(4) generates an array [0, 1, 2, 3], which represents the row indices.
# n3 is [0, 2, 0, 1], which represents the column indices.
# n2[0, 0] is the element at row 0, column 0, which is 1.
# n2[1, 2] is the element at row 1, column 2, which is 6.
# n2[2, 0] is the element at row 2, column 0, which is 7.
# n2[3, 1] is the element at row 3, column 1, which is 11.

"""Array Reshape"""



# 2d array Reshape


# Using arange attribute, making array of 12 elements
n3=np.arange(12)
print('Original Array:',n3)

# Reshaping array into 3 rows and 4 columns

n4=n3.reshape(3,4)
print('Reshaped Array:',n4)

#  Reshaping array into 4 rows and 3 columns

n5=n3.reshape(4,3)
print('Reshaped Array:',n5)

# Using arange attribute, making array of 12 elements

n6=np.arange(12)
print('Original Array:',n6)

# Constructing the 3D array

n7=n6.reshape(2,2,3)
print('3D Array:',n7)

# return copy and view
n8 = np.arange(8)
print('Original Array:', n8)
print(n8.reshape(2, 4).base)

# unknown Dimension
n9=np.array([1, 2, 3, 4, 5, 6, 7, 8])
print(n9.reshape(2,2,-1))

# flattening the arrays
n10=np.array([[1,2,3], [4,5,6]])
print(n10.reshape(-1))



"""### **Array Iterating **"""

# 2D array
n11=np.array([[1, 2, 3], [4, 5, 6]])

for i in n11:
  print(i)

#3D array
n12=np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
for i in n12:
  for j in i:
    for k in j:
      print(k)

n13=np.arange(12)

print(n13.reshape(3,4))

for i in np.nditer(n13):
  print(i)


  # Controlling Iteration Order:


n14=np.arange(12)
print(n14.reshape(3,4))

for i in np.nditer(n14,order='c'):
  print("Modified array:" ,i)

for i in np.nditer(n14,order='F'):
  print("Fortran array:" ,i)



  # Modified array values
for x in np.nditer(n14,op_flags=['readwrite']):
  x[...] = 2 * x
print("Array Modified:" ,n14)


# Brodcasting Interation


n16=np.arange(12).reshape(3,4)
print("First Array is:" ,n16)

n17=np.arange(4).reshape(1,4)
print("Second Array is:" ,n17)


for y,z in np.nditer([n16,n17]):

  print("%d:%d" % (y,z))

"""# **String Information in NumPy**"""

s1=np.array(['Python', 'Java', 'C++'])
s2=np.array(['Js','Ruby','PHP'])
ans=np.char.add(s1,s2)
print(ans)

s3=np.array(['Wow'])
result=np.char.multiply(s3,4)
print(result)

text = np.array(['hello', 'World'])
capitalized = np.char.capitalize(text)

print(capitalized)


s4=np.array(['Python', 'Java', 'C++'])
result=np.char.lower(s4)
result1=np.char.upper(s4)
print(result,result1)


s5=np.array(['React is a Javascript Framework'])
result=np.char.split(s5)
print(result)

"""## **NumPy Joining Array**"""

s6=np.array([[1,2],[3,4]])
s7=np.array([[5,6],[7,8]])
# print(np.concatenate((s6,s7)))

print(np.stack((s6,s7),axis=1))



"""# **Searching Arrays**"""



n20=np.array([1,2,3,5,6,7,8,9])
# print(np.where(n20==5))
# print(np.where(n20%2==0))
# print(np.searchsorted(n20,8))
print(np.searchsorted(n20,4,side='right'))

"""# Comparing and Filtering NumPy array"""

n21=np.array([1,2,3,4,5])
n22=np.array([1,0,3,4,5])
print(np.array_equal(n21,n22))

print(np.allclose(n21,n22))